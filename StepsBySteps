cmd
Step 000:
	reinstall node
	reinstall angular-cli

GIT
Step 001:
	Create repository

cmd
Step 002:
Create project
	ir al directorio de nuestro codigo <C:\Users\hbender\Documents\Code>
  ng new <project> --style=scss --routing --skip-tests
	ng new ludum-nostrum --style=less --routing --skip-tests

VS Code.
Step 003:
	Open folder
	new terminal
	ng serve -o

Step 004:
	clean proyect
  Add this file StepsBySteps
	Optional [Config and plugin VS Code]

Step 005
  git remote add origin https://github.com/HUGO-BENDER/Ludum-Nostrum.git
  git branch -M main
  git push -u origin main

Step 006:
	Start working in src/app/app.component.html   Main html
	create <div> loading or wait screen inside <app-root></app-root>
	css for screen src\styles.scss    is global css
  [optional]     <meta name="google" content="notranslate" />

Step 007:
	Start working in src/app/app.component.html   Main html
  ng add @angular/material
    --Purple/Green
  ng g m share/app.material  or  appMaterial
  select de name: export class AppMaterialModule { }
  start with MatSidenavModule. export in AppMaterialModule
  import AppMaterialModule in app.module
  copy in app.component.html
  <mat-sidenav-container fullscreen>
    <mat-sidenav #appsidenav mode="over" opened class="sidenav" [fixedInViewport]="true" >
      Aca va el componente de la sidebar
    </mat-sidenav>
    <mat-sidenav-content>
      <router-outlet></router-outlet>
    </mat-sidenav-content>
</mat-sidenav-container>

Refactor to
<mat-sidenav-container fullscreen>
  <mat-sidenav #appsidenav mode="over" opened class="sidenav" [fixedInViewport]="true" >
    <div wireframe-title="SideNav"></div>
  </mat-sidenav>
  <mat-sidenav-content>
    <div fxLayout='column' fxFlexFill>
      <div fxFlex="50px"  wireframe-title="Toolbar"><app-toolbar></app-toolbar></div>
      <router-outlet></router-outlet>
      <div fxFlex="30"  wireframe-title="footer"><app-footer></app-footer></div>
    </div>
  </mat-sidenav-content>
</mat-sidenav-container>



step 008
    ng g c contexts/dashboard/UI/home --skip-tests
    Edit app.routing.module
    import {HomeComponent} from './contexts/dashboard/UI/home/home.component'
    const routes: Routes = [
      {
        path: '**',
        component: HomeComponent
      }
    ];

Step 009
      Wireframe.
      Edit styles in root
      //-- Helper to make a wireframe
      //------------------------------
      [wireframe-title] {outline: 2px solid gray;
        position: relative; z-index: 1;}
      [wireframe-title]::before {
        position: absolute; z-index: 8675309;
        top: 0; bottom: 0; right: 0; left: 0;
        background:
           linear-gradient(to top right,
              transparent calc(50% - 1px), gray calc(50% - 1px),
              gray calc(50% + 1px), transparent calc(50% + 1px)),
           linear-gradient(to bottom right,
              transparent calc(50% - 1px), gray calc(50% - 1px),
              gray calc(50% + 1px), transparent calc(50% + 1px)),
           #FFF9;
           content: attr(wireframe-title);
           font-weight:bolder ;
           font-size: large;
           color: white;
           display: flex;
           justify-content: center;
           align-items: center;
      }

      Install flex-layout
      npm i -s @angular/flex-layout @angular/cdk

      with this we can make a wireframe design
      \dashboard\UI\home\home.component.html
      <div fxLayout='column'>
        <app-jumbotron fxFlex></app-jumbotron>
        <div fxFlex="300px"  wireframe-title="Partidas"></div>
        <div fxFlex="300px"  wireframe-title="Juegos"></div>
        <div fxFlex="300px"  wireframe-title="Proyectos"></div>
      </div>

Step 010
  ng g component /contexts/dashboard/UI/toolbar --skip-tests
  ng g component /contexts/dashboard/UI/jumbotron --skip-tests
  ng g component /contexts/dashboard/UI/footer  --skip-tests

Step 011
  Copy from Jumbotron and footer from old projects :-)

Step 012
  <div fxLayout='column' fxFlexFill>
      <app-toolbar fxFlex></app-toolbar>  <<<-- edit
      <router-outlet></router-outlet>
      <div fxFlex="30"  wireframe-title="footer"><app-footer></app-footer></div>
    </div>
  add modules to Material. toolbar icon button
  Create the toolbar

  ng g component /share/logo  --skip-tests
    copy component logo
    put <app-Logo></app-Logo> in toolbar
    <mat-toolbar>
      <mat-toolbar-row>
        <app-logo (click)="toggleAppSidenav()"></app-logo>
    toggleAppSidenav still doesn't do anything

Step 013
    work in sidenav
    ng generate service services/components/sidenavService
    ng g module Contexts/sidebar
    ng g component Contexts/sidebar/UI/sidebar --skip-tests

Step 014
    FIREBASE !!
    Create project in Firebase
    npm install firebase
    follow   https://github.com/angular/angularfire/blob/HEAD/docs/install-and-setup.md
    //-- when you want deploy
      npm install -g firebase-tools
      firebase login
      firebase init
    //---------------  not yet

    In app.module
    import { AngularFireModule } from '@angular/fire/compat';
    import { AngularFirestoreModule } from '@angular/fire/compat/firestore';
    import { environment } from '../environments/environment';

    AngularFireModule.initializeApp(environment.firebaseConfig),
    AngularFirestoreModule

Step 015
     Refactorize Footer wiht Clean Arquitecture
     footer +
            |-+ domain
            |-+ infraestructure
            |-+ UI
            | footer.module.ts

     domain +
            |- xxx-model              the entities. only definitions        /*- como expediente, usuario, document, etc -*/
            |- xxx-gateway            the interface for the providers       /*- "lo que quiero" no importa como -*/
            !- xxx-use-cases-service  the service to provide the functions  /*- este servicio ya tiene inyectado el proovedor configurado -*/

      infraestrucutre +
                      |- driven-adapters +
                      |                  |- hardcode-provider   implement the xxx-gateway   /*- "como lo obtengo" -*/
                      |                  |- xxxxxxxx-provider   implement the xxx-gateway   /*- "como lo obtengo de SQL o Firebase o alguna API de servicio" -*/
                      |- helpers +
                      |          |-  /*- seguramente se necesitan mapear los DTO -*/
      UI +
         |- Angular component


    In footer.module.ts inyect the provider
    @NgModule({
      imports: [CommonModule,FlexLayoutModule],
      declarations: [FooterComponent],
      exports:[ FooterComponent ],
      providers: [{provide: MetadataGateway, useClass: MetadataFirebaseProviderService}]     <<<---- :-)
    })

    Create service MetadataFirebaseProviderService
    export class MetadataFirebaseProviderService extends MetadataGateway {
      constructor(public afs: AngularFirestore) {    /*- inyect firebase -*/
        super();
      }

      getAppMetadata(): Promise<Metadata> {     /*-  App.Metadata id defined in DataBase  -*/
        return this.afs
          .collection('App')
          .doc('Metadata')
          .ref.get()
          .then(function (d) {
            return Promise.resolve(<Metadata>d.data());
          });
      }

Step 016
            ngx-auth-firebaseui
            go to https://ngx-auth-firebaseui.firebaseapp.com/getting-started  and follow the steps. Not icons!
            //-- already installed    :-/
            //--    npm install tslib
            //--    npm i -s @angular/material @angular/cdk

            npm i -s @angular/animations
            npm i -s firebase @angular/fire
            NOT EDIT angular.json !!!! Copy the assets
              copy mdi and user directory and all the *.svgs

            npm i -s @angular/forms
            ng add ngx-auth-firebaseui
            /*- Temporalmente hay que instalarlo asi -*/   npm install --save  ngx-auth-firebaseui
            for use guards in routing see https://github.com/AnthonyNahas/ngx-auth-firebaseui

Step 017
    Module Auth
    ng g m Contexts/auth --routing
    ng g c Contexts/auth/login --skip-tests
    config routes
    on click buton in toolbar call login component

    edit auth.module.ts
    import { NgxAuthFirebaseUIModule } from 'ngx-auth-firebaseui';
    import { FlexLayoutModule } from '@angular/flex-layout';

    edit login.component.html
    <div class="loginContainer" fxLayout="row" fxLayoutAlign="center center" >
      <div fxFlex.lt-sm="90" fxFlex.lt-md="70" fxFlex="50" fxLayout="column" >
        <h2>'App.MenuUser.Login'</h2>
        <ngx-auth-firebaseui
          [signInTabText]="'ngxauthfirebaseui.signInTabText' | translate"
          [signInCardTitleText]="'ngxauthfirebaseui.signInCardTitleText' | translate"
          [loginButtonText]="'ngxauthfirebaseui.loginButtonText' | translate"
          [forgotPasswordButtonText]="'ngxauthfirebaseui.forgotPasswordButtonText' | translate"
          [nameText]="'ngxauthfirebaseui.nameText' | translate"
          [nameErrorRequiredText]="'ngxauthfirebaseui.nameErrorRequiredText' | translate"
          [nameErrorMinLengthText]="'ngxauthfirebaseui.nameErrorMinLengthText' | translate"
          [nameErrorMaxLengthText]="'ngxauthfirebaseui.nameErrorMaxLengthText' | translate"
          [emailText]="'ngxauthfirebaseui.emailText' | translate"
          [emailErrorRequiredText]="'ngxauthfirebaseui.emailErrorRequiredText' | translate"
          [emailErrorPatternText]="'ngxauthfirebaseui.emailErrorPatternText' | translate"
          [passwordText]="'ngxauthfirebaseui.passwordText' | translate"
          [passwordErrorRequiredText]="'ngxauthfirebaseui.passwordErrorRequiredText' | translate"
          [registerTabText]="'ngxauthfirebaseui.registerTabText' | translate"
          [registerCardTitleText]="'ngxauthfirebaseui.registerCardTitleText' | translate"
          [registerButtonText]="'ngxauthfirebaseui.registerButtonText' | translate"
          [guestButtonText]="'ngxauthfirebaseui.guestButtonText' | translate"
          [resetPasswordTabText]="'ngxauthfirebaseui.resetPasswordTabText' | translate"
          [resetPasswordInputText]="'ngxauthfirebaseui.resetPasswordInputText' | translate"
          [resetPasswordErrorRequiredText]="'ngxauthfirebaseui.resetPasswordErrorRequiredText' | translate"
          [resetPasswordErrorPatternText]="'ngxauthfirebaseui.resetPasswordErrorPatternText' | translate"
          [resetPasswordActionButtonText]="'ngxauthfirebaseui.resetPasswordActionButtonText' | translate"
          [resetPasswordInstructionsText]="'ngxauthfirebaseui.resetPasswordInstructionsText' | translate"
          [emailConfirmationTitle]="'ngxauthfirebaseui.emailConfirmationTitle' | translate"
          [emailConfirmationText]="'ngxauthfirebaseui.emailConfirmationText' | translate"
          [guestEnabled]="true"
          (onSuccess)="successCallback($event)"
          (onError)="errorCallback($event)">
        </ngx-auth-firebaseui>
      </div>
    </div>

step 018
    Translations
    we use ngx-translate.
    https://github.com/ngx-translate/core
    https://www.codeandweb.com/babeledit/tutorials/how-to-translate-your-angular-app-with-ngx-translate
    npm install @ngx-translate/core @ngx-translate/http-loader      /*--  Important!!!   --legacy-peer-deps -*/

    Initializing the TranslateModule in app.module.ts.

    import {TranslateLoader, TranslateModule} from '@ngx-translate/core';
    import {TranslateHttpLoader} from '@ngx-translate/http-loader';
    import {HttpClient, HttpClientModule} from '@angular/common/http';

    // required for AOT compilation
    export function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {
        return new TranslateHttpLoader(http);
    }

    imports: [
        // ngx-translate and the loader module
        HttpClientModule,
        TranslateModule.forRoot({
            loader: {
                provide: TranslateLoader,
                useFactory: HttpLoaderFactory,
                deps: [HttpClient]
            }
        })
    ],

     Edit App.component.ts

     import { TranslateService } from '@ngx-translate/core';




